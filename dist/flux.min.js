(()=>{function f(i){let[t,r,n,e="",o=""]=i;return{"x-transition:enter":`${t} ${e}`.trim(),"x-transition:enter-start":r,"x-transition:enter-end":n,"x-transition:leave":`${t} ${o}`.trim(),"x-transition:leave-start":n,"x-transition:leave-end":r}}function p(i){return Object.entries(i).reduce((t,[r,n])=>(t[`x-transition:${r}`]=n,t),{})}function x(i,t=null){if(!t)throw new Error(`x-flux: Template ${i} does not exist.`);try{return Array.isArray(t)?f(t):p(t)}catch{throw new Error("x-flux: Only accept array or object.")}}function a(i,t,r){let n=x(t,r);for(let e in n){let o=n[e];i.setAttribute(e,o)}i.removeAttribute("x-flux")}function c(i,t,r,n=null){i.magic(t,e=>()=>{a(e,r,n)})}function l(i){let t=i.split("-");return t.length===1?i:t[0]+t.slice(1).map(r=>r.charAt(0).toUpperCase()+r.slice(1)).join("")}function m(i,t){i.directive("flux",(r,{expression:n},{evaluate:e})=>{let o=e(n),s=Array.isArray(o)?"":o,u=s?t[s]:o;a(r,s,u)}).before("transition");for(let r in t){let n=l(r),e=t[r]||null;c(i,n,r,e)}i.magic("flux",r=>(n="",e=null,o=!0)=>{if(e){let u=l(n);t[n]=e,c(i,u,n,e)}if(!o)return;let s=t[n]||null;a(r,n,s)})}document.addEventListener("alpine:init",()=>window.Alpine.plugin(m));})();
