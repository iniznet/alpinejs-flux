(()=>{function f(n){let[r,i,e,t="",o=""]=n;return{"x-transition:enter":`${r} ${t}`.trim(),"x-transition:enter-start":i,"x-transition:enter-end":e,"x-transition:leave":`${r} ${o}`.trim(),"x-transition:leave-start":e,"x-transition:leave-end":i}}function l(n){return Object.entries(n).reduce((r,[i,e])=>(r[`x-transition:${i}`]=e,r),{})}function x(n,r=null){if(!r)throw new Error(`x-flux: Template ${n} does not exist.`);try{return Array.isArray(r)?f(r):l(r)}catch{throw new Error("x-flux: Only accept array or object.")}}function a(n,r,i){let e=x(r,i);for(let t in e){let o=e[t];n.setAttribute(t,o)}n.removeAttribute("x-flux")}function u(n,r,i,e=null){n.magic(r,t=>()=>{a(t,i,e)})}function c(n){let r=n.split("-");return r.length===1?n:r[0]+r.slice(1).map(i=>i.charAt(0).toUpperCase()+i.slice(1)).join("")}function p(n,r){n.directive("flux",(t,{expression:o},{evaluate:s})=>{a(t,i(s(o)))}).before("transition");for(let t in r){let o=c(t);u(n,o,t,e(t))}n.magic("flux",t=>(o="",s=null,d=!0)=>{if(s){let m=c(o);r[o]=s,u(n,m,o,s)}d&&a(t,e(o))});function i(t){return Array.isArray(t)?"":t}function e(t){let o=i(t);return o?r[o]:t}}document.addEventListener("alpine:init",()=>window.Alpine.plugin(p));})();
