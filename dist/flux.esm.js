function c(n){let[r,o,e,t="",i=""]=n;return{"x-transition:enter":`${r} ${t}`.trim(),"x-transition:enter-start":o,"x-transition:enter-end":e,"x-transition:leave":`${r} ${i}`.trim(),"x-transition:leave-start":e,"x-transition:leave-end":o}}function x(n){return Object.entries(n).reduce((r,[o,e])=>(r[`x-transition:${o}`]=e,r),{})}function l(n,r=null){if(!r)throw new Error(`x-flux: Template ${n} does not exist.`);try{return Array.isArray(r)?c(r):x(r)}catch{throw new Error("x-flux: Only accept array or object.")}}function a(n,r,o){let e=l(r,o);for(let t in e){let i=e[t];n.setAttribute(t,i)}n.removeAttribute("x-flux")}function u(n,r,o,e=null){n.magic(r,t=>()=>{a(t,o,e)})}function f(n){let r=n.split("-");return r.length===1?n:r[0]+r.slice(1).map(o=>o.charAt(0).toUpperCase()+o.slice(1)).join("")}function p(n,r){n.directive("flux",(t,{expression:i},{evaluate:s})=>{a(t,o(s(i)))}).before("transition");for(let t in r){let i=f(t);u(n,i,t,e(t))}n.magic("flux",t=>(i="",s=null,m=!0)=>{if(s){let d=f(i);r[i]=s,u(n,d,i,s)}m&&a(t,e(i))});function o(t){return Array.isArray(t)?"":t}function e(t){let i=o(t);return i?r[i]:t}}var M=p;export{M as default};
