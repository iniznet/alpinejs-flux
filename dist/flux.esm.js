function l(o){let[t,r,n,e="",i=""]=o;return{"x-transition:enter":`${t} ${e}`.trim(),"x-transition:enter-start":r,"x-transition:enter-end":n,"x-transition:leave":`${t} ${i}`.trim(),"x-transition:leave-start":n,"x-transition:leave-end":r}}function x(o){return Object.entries(o).reduce((t,[r,n])=>(t[`x-transition:${r}`]=n,t),{})}function p(o,t=null){if(!t)throw new Error(`x-flux: Template ${o} does not exist.`);try{return Array.isArray(t)?l(t):x(t)}catch{throw new Error("x-flux: Only accept array or object.")}}function a(o,t,r){let n=p(t,r);for(let e in n){let i=n[e];o.setAttribute(e,i)}o.removeAttribute("x-flux")}function c(o,t,r,n=null){o.magic(t,e=>()=>{a(e,r,n)})}function f(o){let t=o.split("-");return t.length===1?o:t[0]+t.slice(1).map(r=>r.charAt(0).toUpperCase()+r.slice(1)).join("")}function m(o,t){o.directive("flux",(r,{expression:n},{evaluate:e})=>{let i=e(n),s=Array.isArray(i)?"":i,u=s?t[s]:i;a(r,s,u)}).before("transition");for(let r in t){let n=f(r),e=t[r]||null;c(o,n,r,e)}o.magic("flux",r=>(n="",e=null,i=!0)=>{if(e){let u=f(n);t[n]=e,c(o,u,n,e)}if(!i)return;let s=t[n]||null;a(r,n,s)})}var S=m;export{S as default};
